input CourseInput {
    courseTitle: String!
    courseDescription: String
    courseDuration: String
    courseOutcome: String
    category: CategoryInput
}

type Course {
    id: Int
    courseTitle: String!
    courseDescription: String
    courseDuration: String
    courseOutcome: String
    category: Category
}


input CategoryInput {
    category: String
}


type Category {
    id: Int
    category: String!
    courses: [Course]
}



type User {
    username: String!
    password: String!
}



enum SortOrder {
    asc
    desc
}

type Query {
    courses(limit: Int, sortOrder: SortOrder): [Course]
    course(id: Int!): Course
    collections: [Category]
    collection(id: Int!): Category
}


type AuthPayload {
    user: User!
}

type AuthPayloadWithToken{
    user: User!
    token: String
}

type Mutation {
    login(username: String!, password: String!): AuthPayloadWithToken
    register(username: String!, password: String!): AuthPayload
    addCourse(input: CourseInput!): Course
    updateCourse(id: Int!,input: CourseInput!): Course
    deleteCourse(id: Int!): Course,

}